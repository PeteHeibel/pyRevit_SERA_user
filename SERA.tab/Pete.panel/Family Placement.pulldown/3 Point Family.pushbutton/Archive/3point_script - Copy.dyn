{
  "Uuid": "6600611e-dfd4-4aab-9969-107bb643d5a0",
  "IsCustomNode": false,
  "Description": null,
  "Name": "3point_script",
  "ElementResolver": {
    "ResolutionMap": {
      "Point": {
        "Key": "Autodesk.DesignScript.Geometry.Point",
        "Value": "ProtoGeometry.dll"
      }
    }
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.AdaptiveComponent.ByPoints@Autodesk.DesignScript.Geometry.Point[][],Revit.Elements.FamilyType",
      "Id": "8b1da779d2c9417285173f2c7a19196d",
      "Inputs": [
        {
          "Id": "f8d40c61315c45d284078e1e29f5ade5",
          "Name": "points",
          "Description": "a two-dimensional array of points\n\nPoint[][]",
          "UsingDefaultValue": false,
          "Level": 4,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7f7effe8c6c1424d8c9a46f7dec47448",
          "Name": "familyType",
          "Description": "a family type to use to create the adaptive components\n\nFamilyType",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0c9aa9efe0ac45e1b283a3a533167894",
          "Name": "AdaptiveComponent[]..[]",
          "Description": "AdaptiveComponent[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a list of adaptive components from two-dimensional array of points\n\nAdaptiveComponent.ByPoints (points: Point[][], familyType: FamilyType): AdaptiveComponent[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "a6b5c74c-068b-4729-9a78-c2c8eea1d651",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "c966e04797e84372be3a9e36f0078b7f",
      "Inputs": [
        {
          "Id": "d4cdfe98dc514085b3709221e1c91220",
          "Name": "pointGrid",
          "Description": "Point[][]",
          "UsingDefaultValue": false,
          "Level": 4,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ab59e71263b544d0b29f64b410dc0663",
          "Name": "swapDiagDirection",
          "Description": "bool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "bd0c676043fd4d1ab6d4b83abbee8932",
          "Name": "alternateDiagsByRow",
          "Description": "bool\nDefault value : true",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ac38e33b7ddf4075a5772bfa131648bc",
          "Name": "wrap",
          "Description": "bool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7c2eb155c6a14af4a52f2b14d8e90716",
          "Name": "pointSets",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Construct three-point sets describing panels from a rectangular grid of points.  May use a grid of points in the form of a diagrid.  Boolean values \"swapDiagDirection\" and \"alternateDiagsByRow\" control how triangles are formed from the points.  Boolean value \"wrap\" "
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Surface.PointAtParameter@double,double",
      "Id": "b0c30cc6bcc448b4885041bdbcd690d3",
      "Inputs": [
        {
          "Id": "5041e5d2154c4835947bf87c24a1e13e",
          "Name": "surface",
          "Description": "Autodesk.DesignScript.Geometry.Surface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "92bd3da272834493a331e94763456be7",
          "Name": "u",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "fbca3bae34854fbbb63c4c4465ab5aef",
          "Name": "v",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c388cda0c36f4832b915d07895902d57",
          "Name": "Point",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Return the Point at specified U and V parameters.\n\nSurface.PointAtParameter (u: double = 0, v: double = 0): Point"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "1-u;\n0.5;",
      "Id": "ece39a618b1a4355a76e94fbf876c250",
      "Inputs": [
        {
          "Id": "41db3813969447c5a482d7f7f439dc10",
          "Name": "u",
          "Description": "u",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2d46d5e3f9044a9d806e711bf3eab0f4",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b51a7121f3b94fa3811ef5ed9bd6900b",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Geometry.DistanceTo@Autodesk.DesignScript.Geometry.Geometry",
      "Id": "afff8b4bd037459fba15716222b94d26",
      "Inputs": [
        {
          "Id": "01b96dd116854585bc198f36b4d40e0c",
          "Name": "geometry",
          "Description": "Autodesk.DesignScript.Geometry.Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "00e57e0f30d543e8aee55feb86f7ac5f",
          "Name": "other",
          "Description": "The other Geometry\n\nGeometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f3b6adb453ba4a39be98ddf929898064",
          "Name": "double",
          "Description": "The distance",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Obtain the distance from this Geometry to another\n\nGeometry.DistanceTo (other: Geometry): double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.Math.RemapRange@double[],double,double",
      "Id": "0c8a8ddd71ae48e7a629d9d6bd953413",
      "Inputs": [
        {
          "Id": "441e080400a34068b2b0cace765b8326",
          "Name": "numbers",
          "Description": "List of numbers to adjust range of.\n\ndouble[]",
          "UsingDefaultValue": false,
          "Level": 4,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e93198534b8f40e4893daab007879073",
          "Name": "newMin",
          "Description": "New minimum of the range.\n\ndouble\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cb46081396224a29bd38913a63cf76ba",
          "Name": "newMax",
          "Description": "New maximum of the range\n\ndouble\nDefault value : 1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "043dba354ad44e6aa9bb8fda906ce6cd",
          "Name": "list",
          "Description": "List remapped to new range.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Adjusts the range of a list of numbers while preserving the distribution ratio.\n\nMath.RemapRange (numbers: double[], newMin: double = 0, newMax: double = 1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "fd5218294bf5477088c13c7ee4ac1968",
      "Inputs": [
        {
          "Id": "d86169c0dd804965a9168b4fef5152c2",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "edc9b72aa1b14626b97b2600754de900",
          "Name": "amt",
          "Description": "Layers of nesting to remove.\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3ffbbab92b26443bbb6eb6f6bf53c41a",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amt: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Count@var[]..[]",
      "Id": "b7c51e17790a46da892f2253a792a600",
      "Inputs": [
        {
          "Id": "272c923aabed4c84ada2506884deff9e",
          "Name": "list",
          "Description": "List to get the item count of.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "dfb971745ec64b22834f279abc10365b",
          "Name": "count",
          "Description": "List length.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns the number of items stored in the given list.\n\nList.Count (list: var[]..[]): int"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Chop@var[]..[],int[]",
      "Id": "76ad3157b5c845e688cb42b81f8746e4",
      "Inputs": [
        {
          "Id": "20b66d4c36d2492ead566b26488fae21",
          "Name": "list",
          "Description": "List to chop into sublists\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "c6508a16a43349e5b0197f41ab01e2f8",
          "Name": "lengths",
          "Description": "Lengths of consecutive sublists to be created from the input list\n\nint[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7dd6ef39f6364ebf9782fa5830f63674",
          "Name": "lists",
          "Description": "Sublists created from the list",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Chop a list into a set of consecutive sublists with the specified lengths. List division begins at the top of the list.\n\nList.Chop (list: var[]..[], lengths: int[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Surface.NormalAtPoint@Autodesk.DesignScript.Geometry.Point",
      "Id": "7eebe4059da9448286af9c5ba244044c",
      "Inputs": [
        {
          "Id": "da1debb1a773416d9a56b93395ab64a0",
          "Name": "surface",
          "Description": "Autodesk.DesignScript.Geometry.Surface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "51b2e8ebce374d5eb9c3f82da3c6c7ce",
          "Name": "point",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4da4e3f3f8ab42d5afc089bfa001accc",
          "Name": "Vector",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Return the surface normal at the input Point on the Surface.\n\nSurface.NormalAtPoint (point: Point): Vector"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Geometry.Translate@Autodesk.DesignScript.Geometry.Vector,double",
      "Id": "8c85ea824ef041cfbc3f789b9f54be1f",
      "Inputs": [
        {
          "Id": "588133cf654a4fbb9caf481b3bdd6cd3",
          "Name": "geometry",
          "Description": "Autodesk.DesignScript.Geometry.Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "dc03152e3c6942c38f326ca5085e099f",
          "Name": "direction",
          "Description": "Displacement direction.\n\nVector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "81383ab2722f4b07aa498634e23a6d1b",
          "Name": "distance",
          "Description": "Displacement distance along given direction.\n\ndouble",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2c538d98b738467c9cb186042b599035",
          "Name": "Geometry",
          "Description": "Transformed Geometry.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Translates any geometry type by the given distance in the given direction.\n\nGeometry.Translate (direction: Vector, distance: double): Geometry"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Count@var[]..[]",
      "Id": "4721104f0a6d45d68324184fb00f3155",
      "Inputs": [
        {
          "Id": "4d861740433842aaad4784977f760a08",
          "Name": "list",
          "Description": "List to get the item count of.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": true
        }
      ],
      "Outputs": [
        {
          "Id": "38234955421c4206be56260d2eca8845",
          "Name": "count",
          "Description": "List length.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns the number of items stored in the given list.\n\nList.Count (list: var[]..[]): int"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.Math.RandomList@int",
      "Id": "f75912ae75dc4c97b0f34bbfe06025fb",
      "Inputs": [
        {
          "Id": "f21b742ff28144f0a0addb77396ea76c",
          "Name": "amount",
          "Description": "Amount of random numbers the result list will contain.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c120bc9c97f14600bd962c8151f54fe2",
          "Name": "number",
          "Description": "List of random numbers between 0 and 1.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Produces a list containing the given amount of random doubles in the range of [0, 1).\n\nMath.RandomList (amount: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.Math.RemapRange@double[],double,double",
      "Id": "8df1ef4b1fcf448f916c061c965803d7",
      "Inputs": [
        {
          "Id": "a5dd59758c564db5a6cd735ff17e6076",
          "Name": "numbers",
          "Description": "List of numbers to adjust range of.\n\ndouble[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5a40a69043b848978f3b248e8e7fabf4",
          "Name": "newMin",
          "Description": "New minimum of the range.\n\ndouble\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e6ac88f6bc3c4354bb9dfe8716151b76",
          "Name": "newMax",
          "Description": "New maximum of the range\n\ndouble\nDefault value : 1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "fb9e6295995340ffb1127accd6723543",
          "Name": "list",
          "Description": "List remapped to new range.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Adjusts the range of a list of numbers while preserving the distribution ratio.\n\nMath.RemapRange (numbers: double[], newMin: double = 0, newMax: double = 1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "0..1..#countU;\n0..1..#countV;",
      "Id": "887152974d724d5594a3cb6544c9a25a",
      "Inputs": [
        {
          "Id": "52f5848640a64c8bb4d416b1b983783a",
          "Name": "countU",
          "Description": "countU",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d3c3cadfd6914d96b37103653f9df039",
          "Name": "countV",
          "Description": "countV",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1673a67aa23442e78fe747ca8b4bdda8",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "57fbe22d2b36467ab5c2389b3435586d",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Surface.PointAtParameter@double,double",
      "Id": "bfc4f30811d5449380759b6ebe81616f",
      "Inputs": [
        {
          "Id": "f49a5a66b7ac4c7dac31411e50ef8f10",
          "Name": "surface",
          "Description": "Autodesk.DesignScript.Geometry.Surface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d87048e38a1d4587bc3e436f7d2c5f18",
          "Name": "u",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "525241b9e4d542109a644dd0b3ceaafe",
          "Name": "v",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5f7e4b70a89a4dd9b71ec4c932e119ca",
          "Name": "Point",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "CrossProduct",
      "Description": "Return the Point at specified U and V parameters.\n\nSurface.PointAtParameter (u: double = 0, v: double = 0): Point"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Point.X",
      "Id": "2e4e4fa7f8814b988f2b25882108ea9a",
      "Inputs": [
        {
          "Id": "1d2bdabb245b49bab653e9e5ea93375a",
          "Name": "point",
          "Description": "Autodesk.DesignScript.Geometry.Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "04ee96da97074b0aaf33e256fd331aa5",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the X component of a Point\n\nPoint.X: double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Point.X",
      "Id": "0970613090c748098caaab8ec90b3be3",
      "Inputs": [
        {
          "Id": "6ef6ce01a2c0488cbc83ceba7a7c518b",
          "Name": "point",
          "Description": "Autodesk.DesignScript.Geometry.Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5c7d2f04403b47078aff3b043b4d87cb",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the X component of a Point\n\nPoint.X: double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "<@var[]..[],var[]..[]",
      "Id": "4c88000c6bb94144a333895d34773d66",
      "Inputs": [
        {
          "Id": "1828ae8beac8414586933f444659e9ee",
          "Name": "x",
          "Description": "x value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0cd0e28153a94b3f8513eb9ecae1f2e5",
          "Name": "y",
          "Description": "y value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "aa9bd7c954f648729d67eeb1ea10a1c2",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "x less y?\n\n< (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "//determine which panels\n//to flatten\nflat?\n\t0:\n\tdata;",
      "Id": "166c684c542c49978d0f9a5e4323784b",
      "Inputs": [
        {
          "Id": "77f7a5d2260f46a58b1609a7918f963b",
          "Name": "flat",
          "Description": "flat",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9dc9ad0c8cbb4894948ea794ec018410",
          "Name": "data",
          "Description": "data",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "bcfb740bcccd4ba5b5a70527b868be28",
          "Name": "",
          "Description": "Value of expression at line 3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "*@var[]..[],var[]..[]",
      "Id": "c679bdfc04e14a82a09624705073e28a",
      "Inputs": [
        {
          "Id": "9301458b10d54476a9387437f81de786",
          "Name": "x",
          "Description": "x value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9b6ca26d08e24ff99941ce1c6ebd127c",
          "Name": "y",
          "Description": "y value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b6b666af9cfa480d8e5b69c3a7ad1cd8",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Multiplies x by y.\n\n* (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "attractor?\n\tattractorData:\n\trandomData;",
      "Id": "b9a429393df1495ab4504a8733bda79d",
      "Inputs": [
        {
          "Id": "6a2c3fcaf7b14963af78a5433ef172b4",
          "Name": "attractor",
          "Description": "attractor",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4db9925ebd7044c297b4f7fbcfbd7dd5",
          "Name": "attractorData",
          "Description": "attractorData",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3c0db29f33a0422ca264b3d15cd65d1b",
          "Name": "randomData",
          "Description": "randomData",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6129ed455a5a401eb7e128c8427a3d9e",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Surface.NormalAtPoint@Autodesk.DesignScript.Geometry.Point",
      "Id": "8a127a2c31db4c01816033b19fc528e0",
      "Inputs": [
        {
          "Id": "1d6fa054ac20410982619c69e52a124c",
          "Name": "surface",
          "Description": "Autodesk.DesignScript.Geometry.Surface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "25bdfaef208f421cac2a54162777ae08",
          "Name": "point",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "04f1fb4eff4b46c1a5fd1ea07c6c2f36",
          "Name": "Vector",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Return the surface normal at the input Point on the Surface.\n\nSurface.NormalAtPoint (point: Point): Vector"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "1000;\n-100;",
      "Id": "577fa415252f4dfca34baedee31162a5",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "1027d091508b4b93b47359d62fe25f15",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "00bc682dec3f40908255285377cc6c57",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Plane.ByOriginNormal@Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Vector",
      "Id": "a0f8797e28a54525b9330b92bf5a358b",
      "Inputs": [
        {
          "Id": "07366e94284449df8e291e69603e7e3a",
          "Name": "origin",
          "Description": "Point\nDefault value : Autodesk.DesignScript.Geometry.Point.ByCoordinates(0, 0, 0)",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "41aa138245d648919627607dc675fb89",
          "Name": "normal",
          "Description": "Vector\nDefault value : Autodesk.DesignScript.Geometry.Vector.ByCoordinates(0, 0, 1)",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "14f59dac97354aa28395c234638481ad",
          "Name": "Plane",
          "Description": "Plane",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a Plane centered at root Point, with input normal Vector.\n\nPlane.ByOriginNormal (origin: Point = Autodesk.DesignScript.Geometry.Point.ByCoordinates(0, 0, 0), normal: Vector = Autodesk.DesignScript.Geometry.Vector.ByCoordinates(0, 0, 1)): Plane"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Line.ByStartPointDirectionLength@Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Vector,double",
      "Id": "abb6009b16114b8aa10b240f9a24c761",
      "Inputs": [
        {
          "Id": "86abcf4f17f5418c8c54f3a50ecd31e1",
          "Name": "startPoint",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9eaf4cae1985492bbc111547dea8d5f7",
          "Name": "direction",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2b4465c1c4ce4d1f87b989d711112da1",
          "Name": "length",
          "Description": "double\nDefault value : 1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b7264e3b322b427cabe17c8c97b21c83",
          "Name": "Line",
          "Description": "Line",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a straight Line starting at start Point, extending in Vector direction by specified length.\n\nLine.ByStartPointDirectionLength (startPoint: Point, direction: Vector, length: double = 1): Line"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Geometry.DoesIntersect@Autodesk.DesignScript.Geometry.Geometry",
      "Id": "12e804a1135749d29dd310f1e33a6b52",
      "Inputs": [
        {
          "Id": "79c2c7809c744bc38e5dbcb34622f4ed",
          "Name": "geometry",
          "Description": "Autodesk.DesignScript.Geometry.Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d79b209bf5db4f55a0de180135045abb",
          "Name": "other",
          "Description": "Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "be593ce5d16345f4a39cae7e7fdc3552",
          "Name": "bool",
          "Description": "bool",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Determine if another Geometry object intersects with this one\n\nGeometry.DoesIntersect (other: Geometry): bool"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Point.ByCoordinates@double,double,double",
      "Id": "93f205a5f2b04270b6b9fd821bdef789",
      "Inputs": [
        {
          "Id": "770afb2697ce4e73bb25c124540c422c",
          "Name": "x",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ca059ebf651540faa33a8a20fb31b850",
          "Name": "y",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "df88f29be6014d56a2a8d2e59b4e2563",
          "Name": "z",
          "Description": "double\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "562ef6a020a64363b5cf1e1b46093933",
          "Name": "Point",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Form a Point given 3 cartesian coordinates\n\nPoint.ByCoordinates (x: double = 0, y: double = 0, z: double = 0): Point"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "isHorizontal?\n\tcompareX:\n\tcompareZ;",
      "Id": "5c23e7f7a4774746a8336852f1dd089d",
      "Inputs": [
        {
          "Id": "bd57aa1de41f4854a26c38cdd61c025a",
          "Name": "isHorizontal",
          "Description": "isHorizontal",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "fea9cc4709e44f7782ae60e935027989",
          "Name": "compareX",
          "Description": "compareX",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "fc0d9539f8bc489c8b2a04e6107a1df0",
          "Name": "compareZ",
          "Description": "compareZ",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "df870045d966458c8766d92c3b4e0647",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Point.Z",
      "Id": "331c9fc0ccbd4f0f9053a21757b54b55",
      "Inputs": [
        {
          "Id": "d126b0c7e3c34ff5989a8ffe148e34c9",
          "Name": "point",
          "Description": "Autodesk.DesignScript.Geometry.Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "02807f9e5b81483f9bbbae4fc8374902",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the Z component of a Point\n\nPoint.Z: double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Point.Z",
      "Id": "ae34eec26f734cf0b22bca65c5cdb276",
      "Inputs": [
        {
          "Id": "5a3594f2129d4db28ccfbd39122bc721",
          "Name": "point",
          "Description": "Autodesk.DesignScript.Geometry.Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b9437f584aca4787b458a76c50f8877d",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the Z component of a Point\n\nPoint.Z: double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "<@var[]..[],var[]..[]",
      "Id": "c1ecc94a60364309bd8e3b06361a77eb",
      "Inputs": [
        {
          "Id": "23744c0d2acb48e78f370a6635d92a87",
          "Name": "x",
          "Description": "x value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5c8a860969bf4106910469b333c8cb26",
          "Name": "y",
          "Description": "y value.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "123853fc2ebb487c853514894686175f",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "x less y?\n\n< (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FilterByBoolMask@var[]..[],var[]..[]",
      "Id": "5f4c290a86e744ad834c46aa71469314",
      "Inputs": [
        {
          "Id": "90a36feac7584b3ea05ea5a75fefd174",
          "Name": "list",
          "Description": "List to filter.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8e7f2e765d9344ef95e51fc33591702b",
          "Name": "mask",
          "Description": "List of booleans representing a mask.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "796e55413a9b4c5e8a5523bcfc1e9e00",
          "Name": "in",
          "Description": "Items whose mask index is true.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "845e85e6b7544b1c8f1deb1f2531d154",
          "Name": "out",
          "Description": "Items whose mask index is false.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Filters a sequence by looking up corresponding indices in a separate list of booleans.\n\nList.FilterByBoolMask (list: var[]..[], mask: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Geometry.DoesIntersect@Autodesk.DesignScript.Geometry.Geometry",
      "Id": "61267bfa24674002a488073ba17e3078",
      "Inputs": [
        {
          "Id": "69b884e4676a4e70a72625ddb68b8742",
          "Name": "geometry",
          "Description": "Autodesk.DesignScript.Geometry.Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6b96192ab55c4002b40b060ecceced3a",
          "Name": "other",
          "Description": "Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c31687c4b2264764b2a218d7c560511b",
          "Name": "bool",
          "Description": "bool",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Determine if another Geometry object intersects with this one\n\nGeometry.DoesIntersect (other: Geometry): bool"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "9fbd05c0-ec1f-4bd3-bf37-969a1552eab8",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "dabcf105bf574ce5b4df21ae3ac11689",
      "Inputs": [
        {
          "Id": "08c308f0d8914a638e0fa417da847e2d",
          "Name": "Description_optional",
          "Description": "string\nDefault value : \"\"",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8c583ed3997942448e40b79c81ba0883",
          "Name": "Logo_optional",
          "Description": "var\nDefault value : \"\"",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9f5bb65d073243a8935d0325fdc4dddd",
          "Name": "ButtonText_optional",
          "Description": "string\nDefault value : \"Set Values\"",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9079f09c13e0436980c7273b9e3f6820",
          "Name": "Inputs",
          "Description": "var[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2a3b6ac1ae06497ca11c8888c96629dc",
          "Name": "Toggle",
          "Description": "bool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d79bdf8886dc456ba0357ac1176b3f02",
          "Name": "LinkToHelp_optional",
          "Description": "string\nDefault value : null",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "bf7df83d47274fc68273b86a9bfa3b2d",
          "Name": "CancelButtonText_optional",
          "Description": " Cancel button will only be displayed if a label text is entered here\n\nstring\nDefault value : null",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5281b91d703743398496fc576895c7fc",
          "Name": "MaxHeight_optional",
          "Description": "int\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7b40c366a52c4cd29d317f1178834427",
          "Name": "Width_optional",
          "Description": "int\nDefault value : 400",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ea940fc3fa3b4229b84ca5107a722625",
          "Name": "LabelWidth_optional",
          "Description": "int\nDefault value : 120",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d85c14b8325c4925a5db86071d29b554",
          "Name": "User Inputs",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d6ce71867f3b4b0ca184a4c773376868",
          "Name": "Was Run ",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cdf99313bb6540d7997d4df1f049dbf5",
          "Name": "Was Cancelled",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a form with multiple inputs. \r\nsee www.data-shapes.net for tutorials and infos!"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "62113099-742e-4754-acaf-81fcb1e7cec9",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "249ed3a666654d2c8435eed8846219bc",
      "Inputs": [
        {
          "Id": "37ecdfad00e64c089d6791bd6f203bb6",
          "Name": "InputName",
          "Description": "string\nDefault value : \"\"",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "821b063f0d14422595ac860bbc8d33d9",
          "Name": "DefaultValue",
          "Description": "bool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "84baad9e3cd74926ade32f52e885a5f3",
          "Name": "SideText",
          "Description": "string\nDefault value : \"Yes/No\"",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3c48f16fe88f4bf99397cc69314a83a2",
          "Name": "Boolean input",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates a boolean input for UI.MultipleInputForm ++ . Check out www.data-shapes.net for more infos!"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "d5ab45d3-040c-46c6-9aa7-45c75aed4a19",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "ca7e1e220e5c48ff8db0b5d6ad9ec6ff",
      "Inputs": [
        {
          "Id": "a79625ecdcce46958d7130c914b5eba2",
          "Name": "InputName",
          "Description": "string\nDefault value : \"\"",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "45992eb13b33414892f4f6d3ecd1b42d",
          "Name": "ButtonText",
          "Description": "string\nDefault value : \"Select face(s)\"",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "30ca567aae324dcea51b6ca22e02548d",
          "Name": "SelectFaces input",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates a Revit face selection input for UI.MultipleInputForm++. Check out www.data-shapes.net for more infos!"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "2ee81b88-e730-4ffa-a7a6-a89aaf327f47",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "e4d82db8cbe346b09b7f8ffb9fb4ac99",
      "Inputs": [
        {
          "Id": "b21e71cbaed34d20bcfcb4cbd989b0fc",
          "Name": "InputName",
          "Description": "string\nDefault value : \"\"",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6b7ca29ec10544ac90b3032f8e922fc6",
          "Name": "Minimum",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "fa0e028d35dd4cf3b2e1fb440c78a665",
          "Name": "Maximum",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9aa6f7e3e4d6413a860c67b13ed41514",
          "Name": "Default_Value",
          "Description": "var\nDefault value : \"\"",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "00bcf1ca82c340e2a45888d5a8ae1d6f",
          "Name": "Step",
          "Description": "var\nDefault value : 1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d055b5f8e4a94c4b932c10ac71076ea5",
          "Name": "Slider input",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates slider input for UI.MultipleInputForm ++ . Set the step to decimal value if you want a double slider, or to a integer value if you want an integer slider. "
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "2ee81b88-e730-4ffa-a7a6-a89aaf327f47",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "3d63227a4d404e02bf4451bbcb36225b",
      "Inputs": [
        {
          "Id": "36f6ea5530294488bcbe979a00b56faf",
          "Name": "InputName",
          "Description": "string\nDefault value : \"\"",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "fb943962562345b89d1b8ee37869ae84",
          "Name": "Minimum",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "74c9a9162e7942b898c8aaed386c5745",
          "Name": "Maximum",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e9e180c84db1473d809738f3037969de",
          "Name": "Default_Value",
          "Description": "var\nDefault value : \"\"",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8c06499885ae4d5db4464dffb8e7338d",
          "Name": "Step",
          "Description": "var\nDefault value : 1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e4b0189d9b4c4552921be8431a7ad35e",
          "Name": "Slider input",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates slider input for UI.MultipleInputForm ++ . Set the step to decimal value if you want a double slider, or to a integer value if you want an integer slider. "
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "2ee81b88-e730-4ffa-a7a6-a89aaf327f47",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "f21643cabd56404e8eca51382e65e59d",
      "Inputs": [
        {
          "Id": "0182bc6d271c425b813380705e65a4b0",
          "Name": "InputName",
          "Description": "string\nDefault value : \"\"",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "76decff7ad8f4968b01f76002390a61b",
          "Name": "Minimum",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2401bf11bee34a018afc204b715b2e42",
          "Name": "Maximum",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e92fe8254fb54a07922fc4177495922a",
          "Name": "Default_Value",
          "Description": "var\nDefault value : \"\"",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a386300b838b4eeca55f54dd98529469",
          "Name": "Step",
          "Description": "var\nDefault value : 1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7d64dc41821849a4b2646188e959e97b",
          "Name": "Slider input",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates slider input for UI.MultipleInputForm ++ . Set the step to decimal value if you want a double slider, or to a integer value if you want an integer slider. "
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "b409775c-5d88-4d47-96a3-5135c775d26a",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "5c08a41eedd94c22a69070a1f6e146be",
      "Inputs": [
        {
          "Id": "f58bc46999294ee684f91be9f44ff7bf",
          "Name": "InputName",
          "Description": "string\nDefault value : \"\"",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e9e2763d702b4cfe953f666e9b089bbd",
          "Name": "Keys_",
          "Description": "var[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2c29355435c3481cb756916ffa14f513",
          "Name": "Values_",
          "Description": "var[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "adb05f07f7b64a60ad43cd9bce3be548",
          "Name": "DefaultValueIndex",
          "Description": "int\nDefault value : null",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "605320b140e34b7686d9cc74f39a4dfe",
          "Name": "Sorted_optional",
          "Description": "bool\nDefault value : true",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a806a4997bac4eef8881ede4fb4b4858",
          "Name": "DropDown input",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create data for DropDown input in UI.MultiInputForm ++ . Check out www.data-shapes.net for more infos."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Select Face\";\n\n//grid amount\n1;\n20;\n\"U Grid\";\n\"V Grid\";\n\n//offset amount\n0;\n10;\n0.1;\n\"Minimum Offset\";\n\"Maximum Offset\";\n\n//attractor\n0;\n1;\n0.01;\n\"Attractor\";",
      "Id": "791eb725a7574893af01cd71177e3ae8",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "89b89b9c78cf4e3e9508925930762b7e",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e2d0bf91e18b4530bb81e751a4eaae74",
          "Name": "",
          "Description": "Value of expression at line 4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "342da4896f254e35ab5c6d5578869e6d",
          "Name": "",
          "Description": "Value of expression at line 5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "40955eba0906440f85e3e6b7b43777ef",
          "Name": "",
          "Description": "Value of expression at line 6",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "be8697a0fe524179987b3296ba870887",
          "Name": "",
          "Description": "Value of expression at line 7",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8ba5578c30af48e982a8e21a90177829",
          "Name": "",
          "Description": "Value of expression at line 10",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2b0d4c8b0782469da8d178347ec44364",
          "Name": "",
          "Description": "Value of expression at line 11",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c3411d8fcc4f4abb93a6f63f716a5e8d",
          "Name": "",
          "Description": "Value of expression at line 12",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cf65762073f34d55b6c611ffafab7a38",
          "Name": "",
          "Description": "Value of expression at line 13",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "72b8cd5e3e1a4fc28cf7230ad6ee4646",
          "Name": "",
          "Description": "Value of expression at line 14",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "155803aab51746e9ba756dd748b382a5",
          "Name": "",
          "Description": "Value of expression at line 17",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5fb7599371104fab854a4a4b83d25a20",
          "Name": "",
          "Description": "Value of expression at line 18",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "330f49e12e93488c82f482215d9c7283",
          "Name": "",
          "Description": "Value of expression at line 19",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "dc0b51f37d5b4caa94663fb4c635fcac",
          "Name": "",
          "Description": "Value of expression at line 20",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "06e4b8f747444772b2c776db062bfc87",
      "Inputs": [
        {
          "Id": "903f4575bc5e4f5489bb80455ea06170",
          "Name": "item0",
          "Description": "Item Index #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "541dbdd87f564452ad046aa6dc24d5ff",
          "Name": "item1",
          "Description": "Item Index #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e5117cfff2974c9a80395b2ba39a73af",
          "Name": "item2",
          "Description": "Item Index #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "07d7ce8235d640fb8f915961c0c9cdf2",
          "Name": "item3",
          "Description": "Item Index #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7503cd379c6547d8bb5242bae17b5827",
          "Name": "item4",
          "Description": "Item Index #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "86b71f9c8db74681b2664c387a942abe",
          "Name": "item5",
          "Description": "Item Index #5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d4c47e32473b44408a561325f40b3651",
          "Name": "item6",
          "Description": "Item Index #6",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f7e5c15bec0d47d998ba5de87e422459",
          "Name": "item7",
          "Description": "Item Index #7",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "283c7b61d375432bb6e0d285f29c2a03",
          "Name": "list",
          "Description": "A list",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Makes a new list out of the given inputs"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nimport sys\r\nsys.path.append('C:\\Program Files (x86)\\IronPython 2.7\\Lib')\r\nimport System\r\nfrom System import Array\r\nfrom System.Collections.Generic import *\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager \r\nfrom RevitServices.Transactions import TransactionManager \r\n\r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference(\"RevitAPIUI\")\r\n\r\nimport Autodesk \r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.UI import *\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication \r\napp = uiapp.Application \r\nuidoc = uiapp.ActiveUIDocument\r\n\r\nOUT = FilteredElementCollector(doc).OfClass(Family).ToElements()",
      "VariableInputPorts": true,
      "Id": "0b53799905434c758023bbe5db973282",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "4ca39cbcab0b4b27a933137f00f235a6",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "2ee81b88-e730-4ffa-a7a6-a89aaf327f47",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "a67c89e6f94a431d8160e772f055305e",
      "Inputs": [
        {
          "Id": "b9f5539d9f154cdb8d67c91c69636a2f",
          "Name": "InputName",
          "Description": "string\nDefault value : \"\"",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2b0a7fc310324375aea7cad325630b36",
          "Name": "Minimum",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0afcb88675fd4062b07fef33a9a62a86",
          "Name": "Maximum",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a2c32ff6d2bc4def80da8001c7beec0d",
          "Name": "Default_Value",
          "Description": "var\nDefault value : \"\"",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "883d01a3aa794a98b7d50f59ffebf899",
          "Name": "Step",
          "Description": "var\nDefault value : 1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3e1ec01816914781ab9bcfe1f31b8cdd",
          "Name": "Slider input",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates slider input for UI.MultipleInputForm ++ . Set the step to decimal value if you want a double slider, or to a integer value if you want an integer slider. "
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "2ee81b88-e730-4ffa-a7a6-a89aaf327f47",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "efed549b38544ab4a6ae4d2bf2fb0944",
      "Inputs": [
        {
          "Id": "3d248650e6ec4658b8f378a190703bb5",
          "Name": "InputName",
          "Description": "string\nDefault value : \"\"",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c9ace537a8624d29885c21970e1ab7ff",
          "Name": "Minimum",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cc036d76c27a444ca69c9cb7c3585de4",
          "Name": "Maximum",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4e6fd246095f49a58896a4e8664133e2",
          "Name": "Default_Value",
          "Description": "var\nDefault value : \"\"",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2b754ec8478940f4a4d20b71ad7749c8",
          "Name": "Step",
          "Description": "var\nDefault value : 1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ce7a939b9f244cc1b603cfae455ebe75",
          "Name": "Slider input",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates slider input for UI.MultipleInputForm ++ . Set the step to decimal value if you want a double slider, or to a integer value if you want an integer slider. "
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"3-Point Family\";",
      "Id": "b403fd451f234e02adb6f3b8e9d473f5",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ae60dc9e73d54525bb0797585c258675",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "a2c9f89d0fc142fb864f3d5b236e0a4a",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "66301fa45c2f4596a05764b97ef9daad",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "//face\ninputs[0];\n\n//family\ninputs[1];\n\n//u Grid\ninputs[2];\n\n//v Grid\ninputs[3];\n\n//minimum offset\ninputs[4];\n\n//maximum offset\ninputs[5];\n\n//attractor boolean\ninputs[6];\n\n//attractor value\ninputs[7];",
      "Id": "4a74bfaec02248639d90337df74b7d6c",
      "Inputs": [
        {
          "Id": "026b6db1e22c42018fefc98f0ab9e8ba",
          "Name": "inputs",
          "Description": "inputs",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d8f3944ca7574a12a7704b4a8cad9356",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d21cf9a847914348957db40aadf3330b",
          "Name": "",
          "Description": "Value of expression at line 5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8081caa34a4449758ead34ba0acbf903",
          "Name": "",
          "Description": "Value of expression at line 8",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7904a90534f04fbbb1c1b886d8c2ed2e",
          "Name": "",
          "Description": "Value of expression at line 11",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "642243a81db748cfb0b89703f7d82b42",
          "Name": "",
          "Description": "Value of expression at line 14",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f2dfb74db64a4b7697d36d67bef79ffe",
          "Name": "",
          "Description": "Value of expression at line 17",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6a53d8be1a0e482bbb51fe7f40e2871a",
          "Name": "",
          "Description": "Value of expression at line 20",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2ebd28ddb16a401c91b9c9655468b74f",
          "Name": "",
          "Description": "Value of expression at line 23",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Family.Types",
      "Id": "e55145f0de17417e9d018f610ddf3e39",
      "Inputs": [
        {
          "Id": "6a7fc41aebfd4de6a61935f58ca8db8e",
          "Name": "family",
          "Description": "Revit.Elements.Family",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d4a4dca73082413d8923c2b412c10f56",
          "Name": "FamilyType[]",
          "Description": "FamilyType[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Obtain the FamilyTypes from this Family\n\nFamily.Types: FamilyType[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "dc89ebcd28af4d758edaa183610da3f3",
      "Inputs": [
        {
          "Id": "5f040ebff8304e9095a3c582090722d1",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "75a198bd13fe4ecc910b29d27ce0be03",
          "Name": "amt",
          "Description": "Layers of nesting to remove.\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ef81add6a8dc4c5d8d89482111af2b2a",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amt: int = -1): var[]..[]"
    }
  ],
  "Connectors": [
    {
      "Start": "7c2eb155c6a14af4a52f2b14d8e90716",
      "End": "f8d40c61315c45d284078e1e29f5ade5",
      "Id": "743cc8e341214b9e9999d971c608092a"
    },
    {
      "Start": "c388cda0c36f4832b915d07895902d57",
      "End": "00e57e0f30d543e8aee55feb86f7ac5f",
      "Id": "03b2a347797e415a8650b35900a83cd6"
    },
    {
      "Start": "c388cda0c36f4832b915d07895902d57",
      "End": "1d2bdabb245b49bab653e9e5ea93375a",
      "Id": "36caf1fb04124437beb8d31ed5c9ad5b"
    },
    {
      "Start": "c388cda0c36f4832b915d07895902d57",
      "End": "25bdfaef208f421cac2a54162777ae08",
      "Id": "a9d8925860b748708500a1d3550825dc"
    },
    {
      "Start": "c388cda0c36f4832b915d07895902d57",
      "End": "86abcf4f17f5418c8c54f3a50ecd31e1",
      "Id": "ad716fa14c834b8ca8301ab3fbe32599"
    },
    {
      "Start": "c388cda0c36f4832b915d07895902d57",
      "End": "5a3594f2129d4db28ccfbd39122bc721",
      "Id": "95470181fff64ef88e19beca6e084016"
    },
    {
      "Start": "2d46d5e3f9044a9d806e711bf3eab0f4",
      "End": "92bd3da272834493a331e94763456be7",
      "Id": "9ac86c7e79754b5691bed2d276d2ced6"
    },
    {
      "Start": "b51a7121f3b94fa3811ef5ed9bd6900b",
      "End": "fbca3bae34854fbbb63c4c4465ab5aef",
      "Id": "f89bd77387a44818bb075720dbe03d11"
    },
    {
      "Start": "f3b6adb453ba4a39be98ddf929898064",
      "End": "d86169c0dd804965a9168b4fef5152c2",
      "Id": "3bcbafa5accd4e81a8c0cecd00437ec3"
    },
    {
      "Start": "f3b6adb453ba4a39be98ddf929898064",
      "End": "272c923aabed4c84ada2506884deff9e",
      "Id": "35256d698bae49f497bee8b44044698d"
    },
    {
      "Start": "043dba354ad44e6aa9bb8fda906ce6cd",
      "End": "20b66d4c36d2492ead566b26488fae21",
      "Id": "281742f0fb444317a604a86f7fbae118"
    },
    {
      "Start": "3ffbbab92b26443bbb6eb6f6bf53c41a",
      "End": "441e080400a34068b2b0cace765b8326",
      "Id": "2c707f4aacd14f7292c68708341079b8"
    },
    {
      "Start": "dfb971745ec64b22834f279abc10365b",
      "End": "c6508a16a43349e5b0197f41ab01e2f8",
      "Id": "5139de553d414d0d8afacf42c506c9e6"
    },
    {
      "Start": "7dd6ef39f6364ebf9782fa5830f63674",
      "End": "9dc9ad0c8cbb4894948ea794ec018410",
      "Id": "223b75e236fc48c1a52f057b80ac66a1"
    },
    {
      "Start": "4da4e3f3f8ab42d5afc089bfa001accc",
      "End": "dc03152e3c6942c38f326ca5085e099f",
      "Id": "59dab1a8e8d44a3faf00fbb731863b6d"
    },
    {
      "Start": "2c538d98b738467c9cb186042b599035",
      "End": "d4cdfe98dc514085b3709221e1c91220",
      "Id": "4b2253adaeeb408aa453541498fbe485"
    },
    {
      "Start": "38234955421c4206be56260d2eca8845",
      "End": "f21b742ff28144f0a0addb77396ea76c",
      "Id": "47115b992737415592d872ace98894e2"
    },
    {
      "Start": "c120bc9c97f14600bd962c8151f54fe2",
      "End": "a5dd59758c564db5a6cd735ff17e6076",
      "Id": "fd92290e4d8346e985253cd544018134"
    },
    {
      "Start": "fb9e6295995340ffb1127accd6723543",
      "End": "9301458b10d54476a9387437f81de786",
      "Id": "c8231d60d92f4bde9f7bf542b9d116e5"
    },
    {
      "Start": "fb9e6295995340ffb1127accd6723543",
      "End": "3c0db29f33a0422ca264b3d15cd65d1b",
      "Id": "13c802ffd2954ee8a86f7836291215c1"
    },
    {
      "Start": "1673a67aa23442e78fe747ca8b4bdda8",
      "End": "d87048e38a1d4587bc3e436f7d2c5f18",
      "Id": "6761fdff2e394b4287d182c627913366"
    },
    {
      "Start": "57fbe22d2b36467ab5c2389b3435586d",
      "End": "525241b9e4d542109a644dd0b3ceaafe",
      "Id": "cf8e02ee4a874b889572bcf0eb66cd2c"
    },
    {
      "Start": "5f7e4b70a89a4dd9b71ec4c932e119ca",
      "End": "90a36feac7584b3ea05ea5a75fefd174",
      "Id": "4b7ef355fa8a4e44bf06f69bc449e09e"
    },
    {
      "Start": "5f7e4b70a89a4dd9b71ec4c932e119ca",
      "End": "69b884e4676a4e70a72625ddb68b8742",
      "Id": "cbf5c4a6c02d420790da5cfdf020ce9f"
    },
    {
      "Start": "04ee96da97074b0aaf33e256fd331aa5",
      "End": "0cd0e28153a94b3f8513eb9ecae1f2e5",
      "Id": "4872fbd6508b4c73bdd3899311f7b77b"
    },
    {
      "Start": "5c7d2f04403b47078aff3b043b4d87cb",
      "End": "1828ae8beac8414586933f444659e9ee",
      "Id": "0371e5140a824558a8daf27097d49b11"
    },
    {
      "Start": "aa9bd7c954f648729d67eeb1ea10a1c2",
      "End": "fea9cc4709e44f7782ae60e935027989",
      "Id": "861b18bdb8f342e3b7d2c1c268814284"
    },
    {
      "Start": "bcfb740bcccd4ba5b5a70527b868be28",
      "End": "9b6ca26d08e24ff99941ce1c6ebd127c",
      "Id": "1284504290614b2eb66dcdb1d5916fc8"
    },
    {
      "Start": "b6b666af9cfa480d8e5b69c3a7ad1cd8",
      "End": "4db9925ebd7044c297b4f7fbcfbd7dd5",
      "Id": "85e51427826e4312948e7cbd7b41c508"
    },
    {
      "Start": "6129ed455a5a401eb7e128c8427a3d9e",
      "End": "81383ab2722f4b07aa498634e23a6d1b",
      "Id": "f470ef13d70e4fac9596945b9fcd37ff"
    },
    {
      "Start": "04f1fb4eff4b46c1a5fd1ea07c6c2f36",
      "End": "9eaf4cae1985492bbc111547dea8d5f7",
      "Id": "45858737a9d84318ae52f988a4163510"
    },
    {
      "Start": "1027d091508b4b93b47359d62fe25f15",
      "End": "2b4465c1c4ce4d1f87b989d711112da1",
      "Id": "b42c8371a1b94a788fd6399aa8c3a366"
    },
    {
      "Start": "00bc682dec3f40908255285377cc6c57",
      "End": "df88f29be6014d56a2a8d2e59b4e2563",
      "Id": "d36d4476317f418db60f6a1ce0760480"
    },
    {
      "Start": "14f59dac97354aa28395c234638481ad",
      "End": "d79b209bf5db4f55a0de180135045abb",
      "Id": "74a6bb12c8f74bb09d2d2001bb2f52ae"
    },
    {
      "Start": "b7264e3b322b427cabe17c8c97b21c83",
      "End": "79c2c7809c744bc38e5dbcb34622f4ed",
      "Id": "95f1c6abc63440a7a4588ddfc8a2febe"
    },
    {
      "Start": "be593ce5d16345f4a39cae7e7fdc3552",
      "End": "bd57aa1de41f4854a26c38cdd61c025a",
      "Id": "7c6ab5b919904a6cb56a5092ff4e8877"
    },
    {
      "Start": "562ef6a020a64363b5cf1e1b46093933",
      "End": "07366e94284449df8e291e69603e7e3a",
      "Id": "56d9b2a2e3414f31ab2213a45d5599b7"
    },
    {
      "Start": "df870045d966458c8766d92c3b4e0647",
      "End": "77f7a5d2260f46a58b1609a7918f963b",
      "Id": "6fe3230abf2f4be09cdcc5caf709ac7e"
    },
    {
      "Start": "02807f9e5b81483f9bbbae4fc8374902",
      "End": "23744c0d2acb48e78f370a6635d92a87",
      "Id": "d4d7db58ea6e4f83986e8ff1da6057ed"
    },
    {
      "Start": "b9437f584aca4787b458a76c50f8877d",
      "End": "5c8a860969bf4106910469b333c8cb26",
      "Id": "78e723005a284c14bee17ff8bc388bf4"
    },
    {
      "Start": "123853fc2ebb487c853514894686175f",
      "End": "fc0d9539f8bc489c8b2a04e6107a1df0",
      "Id": "3da18c4aaf494ebfa9a2c13335c73dad"
    },
    {
      "Start": "796e55413a9b4c5e8a5523bcfc1e9e00",
      "End": "588133cf654a4fbb9caf481b3bdd6cd3",
      "Id": "1f5abb6994f348b89d29720dc8dc59f6"
    },
    {
      "Start": "796e55413a9b4c5e8a5523bcfc1e9e00",
      "End": "51b2e8ebce374d5eb9c3f82da3c6c7ce",
      "Id": "53c02823814d40a6ad5304349495a050"
    },
    {
      "Start": "796e55413a9b4c5e8a5523bcfc1e9e00",
      "End": "01b96dd116854585bc198f36b4d40e0c",
      "Id": "3e22f2ce71b14c049196ab01aec2ffd9"
    },
    {
      "Start": "796e55413a9b4c5e8a5523bcfc1e9e00",
      "End": "6ef6ce01a2c0488cbc83ceba7a7c518b",
      "Id": "d7bb539a45eb4e4a9e7e9fefa394234f"
    },
    {
      "Start": "796e55413a9b4c5e8a5523bcfc1e9e00",
      "End": "4d861740433842aaad4784977f760a08",
      "Id": "2a15584548324cf89a2386b92be84116"
    },
    {
      "Start": "796e55413a9b4c5e8a5523bcfc1e9e00",
      "End": "d126b0c7e3c34ff5989a8ffe148e34c9",
      "Id": "1b799bfd9505499bb07129960ccaa149"
    },
    {
      "Start": "c31687c4b2264764b2a218d7c560511b",
      "End": "8e7f2e765d9344ef95e51fc33591702b",
      "Id": "ab73c36474404fe696fc37c06dd704ef"
    },
    {
      "Start": "d85c14b8325c4925a5db86071d29b554",
      "End": "026b6db1e22c42018fefc98f0ab9e8ba",
      "Id": "e96c56b4d7a74ff0a2332f045712c6f6"
    },
    {
      "Start": "3c48f16fe88f4bf99397cc69314a83a2",
      "End": "d4c47e32473b44408a561325f40b3651",
      "Id": "c09d8708e7bb4a0285efc130bbf862fb"
    },
    {
      "Start": "30ca567aae324dcea51b6ca22e02548d",
      "End": "903f4575bc5e4f5489bb80455ea06170",
      "Id": "cbfd61699ee24bb69e0cdfa3051d4e6f"
    },
    {
      "Start": "d055b5f8e4a94c4b932c10ac71076ea5",
      "End": "e5117cfff2974c9a80395b2ba39a73af",
      "Id": "e11b2f8f27ad4f17ac9213fe315cfccc"
    },
    {
      "Start": "e4b0189d9b4c4552921be8431a7ad35e",
      "End": "07d7ce8235d640fb8f915961c0c9cdf2",
      "Id": "225d8d79d41342938a6b99b4410776e4"
    },
    {
      "Start": "7d64dc41821849a4b2646188e959e97b",
      "End": "7503cd379c6547d8bb5242bae17b5827",
      "Id": "36125815ef964f65b7e0d4148b4f1a99"
    },
    {
      "Start": "a806a4997bac4eef8881ede4fb4b4858",
      "End": "541dbdd87f564452ad046aa6dc24d5ff",
      "Id": "d6b4d1ec22c14bb6800e9f677eb8d3c8"
    },
    {
      "Start": "89b89b9c78cf4e3e9508925930762b7e",
      "End": "45992eb13b33414892f4f6d3ecd1b42d",
      "Id": "d111bfe938424206a773e310fc2f9be9"
    },
    {
      "Start": "e2d0bf91e18b4530bb81e751a4eaae74",
      "End": "6b7ca29ec10544ac90b3032f8e922fc6",
      "Id": "3fab5f1221fd4b889ff3f2e6a2dd83af"
    },
    {
      "Start": "e2d0bf91e18b4530bb81e751a4eaae74",
      "End": "fb943962562345b89d1b8ee37869ae84",
      "Id": "aabdd0e3216b4e9894b52c61b36103b1"
    },
    {
      "Start": "342da4896f254e35ab5c6d5578869e6d",
      "End": "fa0e028d35dd4cf3b2e1fb440c78a665",
      "Id": "8714a54c358c4a5c888296cf31958387"
    },
    {
      "Start": "342da4896f254e35ab5c6d5578869e6d",
      "End": "74c9a9162e7942b898c8aaed386c5745",
      "Id": "31bda91f80e64df49789596fd5434e35"
    },
    {
      "Start": "40955eba0906440f85e3e6b7b43777ef",
      "End": "b21e71cbaed34d20bcfcb4cbd989b0fc",
      "Id": "3b7010c86ced4c8eb7744b4b10ebcb3b"
    },
    {
      "Start": "be8697a0fe524179987b3296ba870887",
      "End": "36f6ea5530294488bcbe979a00b56faf",
      "Id": "18ee365243c34b04be1ba5d4eafd5c26"
    },
    {
      "Start": "8ba5578c30af48e982a8e21a90177829",
      "End": "2b0a7fc310324375aea7cad325630b36",
      "Id": "d27fbfe5eef64fd3bf37bdaf1fe14ab9"
    },
    {
      "Start": "8ba5578c30af48e982a8e21a90177829",
      "End": "76decff7ad8f4968b01f76002390a61b",
      "Id": "21bbe79ff8244852a669d57899c0c8f7"
    },
    {
      "Start": "2b0d4c8b0782469da8d178347ec44364",
      "End": "0afcb88675fd4062b07fef33a9a62a86",
      "Id": "21e064fe90fb462e898e07e823b11753"
    },
    {
      "Start": "2b0d4c8b0782469da8d178347ec44364",
      "End": "2401bf11bee34a018afc204b715b2e42",
      "Id": "bb9c4ef926c646c1be07a5364522dadd"
    },
    {
      "Start": "c3411d8fcc4f4abb93a6f63f716a5e8d",
      "End": "883d01a3aa794a98b7d50f59ffebf899",
      "Id": "123f8a78b74741f7aa86d3b79eea1a8b"
    },
    {
      "Start": "c3411d8fcc4f4abb93a6f63f716a5e8d",
      "End": "a386300b838b4eeca55f54dd98529469",
      "Id": "57dec5346e79468c984c04bf49b1b099"
    },
    {
      "Start": "cf65762073f34d55b6c611ffafab7a38",
      "End": "0182bc6d271c425b813380705e65a4b0",
      "Id": "019cc1ee8f5a445b85d61c6e7593a345"
    },
    {
      "Start": "72b8cd5e3e1a4fc28cf7230ad6ee4646",
      "End": "b9f5539d9f154cdb8d67c91c69636a2f",
      "Id": "f1c05a065c0e40e4a8358b29d429aed6"
    },
    {
      "Start": "155803aab51746e9ba756dd748b382a5",
      "End": "c9ace537a8624d29885c21970e1ab7ff",
      "Id": "84683e3a3e75479d97c6c719cc5481c9"
    },
    {
      "Start": "5fb7599371104fab854a4a4b83d25a20",
      "End": "cc036d76c27a444ca69c9cb7c3585de4",
      "Id": "4ea88148290445b2b4f970c2b2970689"
    },
    {
      "Start": "330f49e12e93488c82f482215d9c7283",
      "End": "2b754ec8478940f4a4d20b71ad7749c8",
      "Id": "be685194c2f441beb8dfbfea781369c6"
    },
    {
      "Start": "dc0b51f37d5b4caa94663fb4c635fcac",
      "End": "3d248650e6ec4658b8f378a190703bb5",
      "Id": "1ae6f74905f7493895794856e52159df"
    },
    {
      "Start": "dc0b51f37d5b4caa94663fb4c635fcac",
      "End": "37ecdfad00e64c089d6791bd6f203bb6",
      "Id": "77e85f09e4e44552babea7c6f3114169"
    },
    {
      "Start": "283c7b61d375432bb6e0d285f29c2a03",
      "End": "9079f09c13e0436980c7273b9e3f6820",
      "Id": "aeca762d8a2c48158160f032f6849722"
    },
    {
      "Start": "4ca39cbcab0b4b27a933137f00f235a6",
      "End": "6a7fc41aebfd4de6a61935f58ca8db8e",
      "Id": "504929fdbcfd4e6c85b448982a34e2dd"
    },
    {
      "Start": "3e1ec01816914781ab9bcfe1f31b8cdd",
      "End": "86b71f9c8db74681b2664c387a942abe",
      "Id": "4cfcdaac768d41cba9412f51c8c9adb0"
    },
    {
      "Start": "ce7a939b9f244cc1b603cfae455ebe75",
      "End": "f7e5c15bec0d47d998ba5de87e422459",
      "Id": "7d8289e666e3440e9746a9884d2f1b4d"
    },
    {
      "Start": "ae60dc9e73d54525bb0797585c258675",
      "End": "f58bc46999294ee684f91be9f44ff7bf",
      "Id": "adc6a45a7632434c83163b8950f532bb"
    },
    {
      "Start": "66301fa45c2f4596a05764b97ef9daad",
      "End": "2a3b6ac1ae06497ca11c8888c96629dc",
      "Id": "a68e8611726e48d6a871768707b37673"
    },
    {
      "Start": "d8f3944ca7574a12a7704b4a8cad9356",
      "End": "5041e5d2154c4835947bf87c24a1e13e",
      "Id": "df9b7eab6f17479fa96b5ff4bf2b676e"
    },
    {
      "Start": "d8f3944ca7574a12a7704b4a8cad9356",
      "End": "da1debb1a773416d9a56b93395ab64a0",
      "Id": "d1be59cd40854ec8a3d2c794cf5c0685"
    },
    {
      "Start": "d8f3944ca7574a12a7704b4a8cad9356",
      "End": "f49a5a66b7ac4c7dac31411e50ef8f10",
      "Id": "9d9f8ea0ea124aabb48ea4c835b855f2"
    },
    {
      "Start": "d8f3944ca7574a12a7704b4a8cad9356",
      "End": "1d6fa054ac20410982619c69e52a124c",
      "Id": "cbc6c4357df7472da0ba1a32065392d4"
    },
    {
      "Start": "d8f3944ca7574a12a7704b4a8cad9356",
      "End": "6b96192ab55c4002b40b060ecceced3a",
      "Id": "cb079ce519404deab668e17ed4a96053"
    },
    {
      "Start": "d21cf9a847914348957db40aadf3330b",
      "End": "7f7effe8c6c1424d8c9a46f7dec47448",
      "Id": "196f85284c1549f59e0c51afa9810784"
    },
    {
      "Start": "8081caa34a4449758ead34ba0acbf903",
      "End": "52f5848640a64c8bb4d416b1b983783a",
      "Id": "e2f25efd6d724094a8e2071ea39e4cb1"
    },
    {
      "Start": "7904a90534f04fbbb1c1b886d8c2ed2e",
      "End": "d3c3cadfd6914d96b37103653f9df039",
      "Id": "a7116b420dbd49ffa034997b7c17d95c"
    },
    {
      "Start": "642243a81db748cfb0b89703f7d82b42",
      "End": "5a40a69043b848978f3b248e8e7fabf4",
      "Id": "111ab1bc86904030901d557dff20d7ff"
    },
    {
      "Start": "f2dfb74db64a4b7697d36d67bef79ffe",
      "End": "e6ac88f6bc3c4354bb9dfe8716151b76",
      "Id": "6126375ed9494be28381129399d0f9e4"
    },
    {
      "Start": "6a53d8be1a0e482bbb51fe7f40e2871a",
      "End": "6a2c3fcaf7b14963af78a5433ef172b4",
      "Id": "5c1cc9335eb642f89269abd44c6d6ee9"
    },
    {
      "Start": "2ebd28ddb16a401c91b9c9655468b74f",
      "End": "41db3813969447c5a482d7f7f439dc10",
      "Id": "03a598ad9475436d839030f724f13046"
    },
    {
      "Start": "d4a4dca73082413d8923c2b412c10f56",
      "End": "5f040ebff8304e9095a3c582090722d1",
      "Id": "17cf5502cb7a4827b03216dff437c82f"
    },
    {
      "Start": "ef81add6a8dc4c5d8d89482111af2b2a",
      "End": "2c29355435c3481cb756916ffa14f513",
      "Id": "a6579c7d0afd4a48995fe17823d92288"
    },
    {
      "Start": "ef81add6a8dc4c5d8d89482111af2b2a",
      "End": "e9e2763d702b4cfe953f666e9b089bbd",
      "Id": "e12f91c9594e424cbcb73c72f77e4db2"
    }
  ],
  "Dependencies": [
    "a6b5c74c-068b-4729-9a78-c2c8eea1d651",
    "9fbd05c0-ec1f-4bd3-bf37-969a1552eab8",
    "62113099-742e-4754-acaf-81fcb1e7cec9",
    "d5ab45d3-040c-46c6-9aa7-45c75aed4a19",
    "2ee81b88-e730-4ffa-a7a6-a89aaf327f47",
    "b409775c-5d88-4d47-96a3-5135c775d26a"
  ],
  "NodeLibraryDependencies": [
    {
      "Name": "Ampersand",
      "Version": "2019.12.31",
      "ReferenceType": "Package",
      "Nodes": [
        "c966e04797e84372be3a9e36f0078b7f"
      ]
    },
    {
      "Name": "Data-Shapes",
      "Version": "2021.2.94",
      "ReferenceType": "Package",
      "Nodes": [
        "dabcf105bf574ce5b4df21ae3ac11689",
        "249ed3a666654d2c8435eed8846219bc",
        "ca7e1e220e5c48ff8db0b5d6ad9ec6ff",
        "e4d82db8cbe346b09b7f8ffb9fb4ac99",
        "3d63227a4d404e02bf4451bbcb36225b",
        "f21643cabd56404e8eca51382e65e59d",
        "5c08a41eedd94c22a69070a1f6e146be",
        "a67c89e6f94a431d8160e772f055305e",
        "efed549b38544ab4a6ae4d2bf2fb0944"
      ]
    }
  ],
  "Bindings": [
    {
      "NodeId": "8b1da779-d2c9-4172-8517-3f2c7a19196d",
      "Binding": {
        "ByPoints_InClassDecl-1_InFunctionScope-1_Instance1_8b1da779-d2c9-4172-8517-3f2c7a19196d": ""
      }
    }
  ],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.6.1.8786",
      "RunType": "Automatic",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "AdaptiveComponent.ByPoints",
        "Id": "8b1da779d2c9417285173f2c7a19196d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4803.0997137908635,
        "Y": 12.682885073855914
      },
      {
        "ShowGeometry": false,
        "Name": "[&] PointGrid.ToTriSets",
        "Id": "c966e04797e84372be3a9e36f0078b7f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4406.0997137908635,
        "Y": 66.297926406059915
      },
      {
        "ShowGeometry": true,
        "Name": "Surface.PointAtParameter",
        "Id": "b0c30cc6bcc448b4885041bdbcd690d3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1264.6079872331484,
        "Y": 21.921952549745242
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "ece39a618b1a4355a76e94fbf876c250",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 960.60798723314838,
        "Y": 56.348619216411862
      },
      {
        "ShowGeometry": true,
        "Name": "Geometry.DistanceTo",
        "Id": "afff8b4bd037459fba15716222b94d26",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1560.6079872331484,
        "Y": 401.92195254974524
      },
      {
        "ShowGeometry": true,
        "Name": "Math.RemapRange",
        "Id": "0c8a8ddd71ae48e7a629d9d6bd953413",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2262.6079872331484,
        "Y": 260.92195254974524
      },
      {
        "ShowGeometry": true,
        "Name": "List.Flatten",
        "Id": "fd5218294bf5477088c13c7ee4ac1968",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1879.6079872331484,
        "Y": 381.92195254974524
      },
      {
        "ShowGeometry": true,
        "Name": "List.Count",
        "Id": "b7c51e17790a46da892f2253a792a600",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2262.6079872331484,
        "Y": 421.92195254974524
      },
      {
        "ShowGeometry": true,
        "Name": "List.Chop",
        "Id": "76ad3157b5c845e688cb42b81f8746e4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2566.6079872331484,
        "Y": 232.92195254974524
      },
      {
        "ShowGeometry": true,
        "Name": "Surface.NormalAtPoint",
        "Id": "7eebe4059da9448286af9c5ba244044c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3566.6079872331484,
        "Y": 106.92195254974519
      },
      {
        "ShowGeometry": false,
        "Name": "Geometry.Translate",
        "Id": "8c85ea824ef041cfbc3f789b9f54be1f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3958.6079872331484,
        "Y": 132.92195254974513
      },
      {
        "ShowGeometry": true,
        "Name": "List.Count",
        "Id": "4721104f0a6d45d68324184fb00f3155",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2262.6079872331484,
        "Y": 530.28195254974526
      },
      {
        "ShowGeometry": true,
        "Name": "Math.RandomList",
        "Id": "f75912ae75dc4c97b0f34bbfe06025fb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2566.6079872331484,
        "Y": 367.28195254974526
      },
      {
        "ShowGeometry": false,
        "Name": "Math.RemapRange",
        "Id": "8df1ef4b1fcf448f916c061c965803d7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2909.6079872331484,
        "Y": 342.28195254974526
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "887152974d724d5594a3cb6544c9a25a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 342.60798723314838,
        "Y": 230.6352858830785
      },
      {
        "ShowGeometry": false,
        "Name": "Surface.PointAtParameter",
        "Id": "bfc4f30811d5449380759b6ebe81616f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 664.60798723314838,
        "Y": 196.20861921641188
      },
      {
        "ShowGeometry": true,
        "Name": "Point.X",
        "Id": "2e4e4fa7f8814b988f2b25882108ea9a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1879.6079872331484,
        "Y": 55.921952549745242
      },
      {
        "ShowGeometry": true,
        "Name": "Point.X",
        "Id": "0970613090c748098caaab8ec90b3be3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1879.6079872331484,
        "Y": -52.078047450254758
      },
      {
        "ShowGeometry": true,
        "Name": "<",
        "Id": "4c88000c6bb94144a333895d34773d66",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2262.6079872331484,
        "Y": -8.0780474502547577
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "166c684c542c49978d0f9a5e4323784b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2909.6079872331484,
        "Y": 170.56195254974523
      },
      {
        "ShowGeometry": true,
        "Name": "*",
        "Id": "c679bdfc04e14a82a09624705073e28a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3297.6079872331484,
        "Y": 254.49528588307862
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "b9a429393df1495ab4504a8733bda79d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3566.6079872331484,
        "Y": 241.1352858830785
      },
      {
        "ShowGeometry": true,
        "Name": "Surface.NormalAtPoint",
        "Id": "8a127a2c31db4c01816033b19fc528e0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1560.6079872331484,
        "Y": -321.65138078358814
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "577fa415252f4dfca34baedee31162a5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1264.6079872331484,
        "Y": -219.72471411692152
      },
      {
        "ShowGeometry": false,
        "Name": "Plane.ByOriginNormal",
        "Id": "a0f8797e28a54525b9330b92bf5a358b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1879.6079872331484,
        "Y": -186.65138078358817
      },
      {
        "ShowGeometry": false,
        "Name": "Line.ByStartPointDirectionLength",
        "Id": "abb6009b16114b8aa10b240f9a24c761",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1879.6079872331484,
        "Y": -347.65138078358814
      },
      {
        "ShowGeometry": true,
        "Name": "Geometry.DoesIntersect",
        "Id": "12e804a1135749d29dd310f1e33a6b52",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2262.6079872331484,
        "Y": -142.65138078358814
      },
      {
        "ShowGeometry": false,
        "Name": "Point.ByCoordinates",
        "Id": "93f205a5f2b04270b6b9fd821bdef789",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1560.6079872331484,
        "Y": -186.65138078358817
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "5c23e7f7a4774746a8336852f1dd089d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2566.6079872331484,
        "Y": 96.561952549745172
      },
      {
        "ShowGeometry": true,
        "Name": "Point.Z",
        "Id": "331c9fc0ccbd4f0f9053a21757b54b55",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1879.6079872331484,
        "Y": 165.49528588307862
      },
      {
        "ShowGeometry": true,
        "Name": "Point.Z",
        "Id": "ae34eec26f734cf0b22bca65c5cdb276",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1879.6079872331484,
        "Y": 273.49528588307862
      },
      {
        "ShowGeometry": true,
        "Name": "<",
        "Id": "c1ecc94a60364309bd8e3b06361a77eb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2262.6079872331484,
        "Y": 126.49528588307862
      },
      {
        "ShowGeometry": false,
        "Name": "List.FilterByBoolMask",
        "Id": "5f4c290a86e744ad834c46aa71469314",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1264.6079872331484,
        "Y": 183.20861921641188
      },
      {
        "ShowGeometry": true,
        "Name": "Geometry.DoesIntersect",
        "Id": "61267bfa24674002a488073ba17e3078",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 960.60798723314838,
        "Y": 209.20861921641188
      },
      {
        "ShowGeometry": true,
        "Name": "MultipleInputForm ++",
        "Id": "dabcf105bf574ce5b4df21ae3ac11689",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -722.90668050175236,
        "Y": -1400.5269883903236
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean input",
        "Id": "249ed3a666654d2c8435eed8846219bc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1381.9066805017524,
        "Y": -835.5269883903236
      },
      {
        "ShowGeometry": true,
        "Name": "SelectFaces Data",
        "Id": "ca7e1e220e5c48ff8db0b5d6ad9ec6ff",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1381.9066805017524,
        "Y": -2031.5269883903236
      },
      {
        "ShowGeometry": true,
        "Name": "Slider",
        "Id": "e4d82db8cbe346b09b7f8ffb9fb4ac99",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1381.9066805017524,
        "Y": -1685.5269883903236
      },
      {
        "ShowGeometry": true,
        "Name": "Slider",
        "Id": "3d63227a4d404e02bf4451bbcb36225b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1381.9066805017524,
        "Y": -1473.5269883903236
      },
      {
        "ShowGeometry": true,
        "Name": "Slider",
        "Id": "f21643cabd56404e8eca51382e65e59d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1381.9066805017524,
        "Y": -1261.5269883903236
      },
      {
        "ShowGeometry": true,
        "Name": "DropDown Data",
        "Id": "5c08a41eedd94c22a69070a1f6e146be",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1381.9066805017524,
        "Y": -1897.5269883903236
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "791eb725a7574893af01cd71177e3ae8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1672.9066805017524,
        "Y": -1363.8336550569902
      },
      {
        "ShowGeometry": true,
        "Name": "List Create",
        "Id": "06e4b8f747444772b2c776db062bfc87",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -957.90668050175236,
        "Y": -1454.5269883903236
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "0b53799905434c758023bbe5db973282",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2205.9066805017524,
        "Y": -1821.5269883903236
      },
      {
        "ShowGeometry": true,
        "Name": "Slider",
        "Id": "a67c89e6f94a431d8160e772f055305e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1381.9066805017524,
        "Y": -1048.5269883903234
      },
      {
        "ShowGeometry": true,
        "Name": "Slider",
        "Id": "efed549b38544ab4a6ae4d2bf2fb0944",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1381.9066805017524,
        "Y": -674.5269883903236
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "b403fd451f234e02adb6f3b8e9d473f5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1672.9066805017524,
        "Y": -1930.3136550569902
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "a2c9f89d0fc142fb864f3d5b236e0a4a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -957.90668050175236,
        "Y": -1164.5269883903234
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "4a74bfaec02248639d90337df74b7d6c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -262.90668050175236,
        "Y": -1396.3136550569902
      },
      {
        "ShowGeometry": true,
        "Name": "Family.Types",
        "Id": "e55145f0de17417e9d018f610ddf3e39",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2005.9066805017524,
        "Y": -1821.5269883903236
      },
      {
        "ShowGeometry": true,
        "Name": "List.Flatten",
        "Id": "dc89ebcd28af4d758edaa183610da3f3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1672.9066805017524,
        "Y": -1821.5269883903236
      }
    ],
    "Annotations": [
      {
        "Id": "9c8871c8c4ef4b83b819bbf2c787da08",
        "Title": "",
        "Nodes": [
          "8b1da779d2c9417285173f2c7a19196d",
          "c966e04797e84372be3a9e36f0078b7f"
        ],
        "Left": 4396.0997137908635,
        "Top": -17.317114926144086,
        "Width": 751.0,
        "Height": 254.615041332204,
        "FontSize": 14.0,
        "InitialTop": 12.682885073855914,
        "InitialHeight": 198.615041332204,
        "TextblockHeight": 20.0,
        "Background": "#FFB9F9E1"
      },
      {
        "Id": "087cb821174844ed842cf197f8011b5a",
        "Title": "",
        "Nodes": [
          "b0c30cc6bcc448b4885041bdbcd690d3",
          "ece39a618b1a4355a76e94fbf876c250",
          "afff8b4bd037459fba15716222b94d26",
          "0c8a8ddd71ae48e7a629d9d6bd953413",
          "fd5218294bf5477088c13c7ee4ac1968",
          "b7c51e17790a46da892f2253a792a600",
          "76ad3157b5c845e688cb42b81f8746e4",
          "7eebe4059da9448286af9c5ba244044c",
          "8c85ea824ef041cfbc3f789b9f54be1f",
          "4721104f0a6d45d68324184fb00f3155",
          "f75912ae75dc4c97b0f34bbfe06025fb",
          "8df1ef4b1fcf448f916c061c965803d7",
          "887152974d724d5594a3cb6544c9a25a",
          "bfc4f30811d5449380759b6ebe81616f",
          "2e4e4fa7f8814b988f2b25882108ea9a",
          "0970613090c748098caaab8ec90b3be3",
          "4c88000c6bb94144a333895d34773d66",
          "166c684c542c49978d0f9a5e4323784b",
          "c679bdfc04e14a82a09624705073e28a",
          "b9a429393df1495ab4504a8733bda79d",
          "8a127a2c31db4c01816033b19fc528e0",
          "577fa415252f4dfca34baedee31162a5",
          "a0f8797e28a54525b9330b92bf5a358b",
          "abb6009b16114b8aa10b240f9a24c761",
          "12e804a1135749d29dd310f1e33a6b52",
          "93f205a5f2b04270b6b9fd821bdef789",
          "5c23e7f7a4774746a8336852f1dd089d",
          "331c9fc0ccbd4f0f9053a21757b54b55",
          "ae34eec26f734cf0b22bca65c5cdb276",
          "c1ecc94a60364309bd8e3b06361a77eb",
          "61267bfa24674002a488073ba17e3078",
          "5f4c290a86e744ad834c46aa71469314",
          "29ce8958226f4df0b2b8305426aa1a6f",
          "3c4b019652b248b2a653627f792823f5"
        ],
        "Left": 332.60798723314838,
        "Top": -377.65138078358814,
        "Width": 3873.0,
        "Height": 1000.9333333333334,
        "FontSize": 14.0,
        "InitialTop": -347.65138078358814,
        "InitialHeight": 1022.9333333333334,
        "TextblockHeight": 20.0,
        "Background": "#FFE8F7AD"
      },
      {
        "Id": "2357abf4a118454da1f770606e9ab50d",
        "Title": "",
        "Nodes": [
          "0290c578e3fa44e0a22436cc134482eb"
        ],
        "Left": -723.783238936321,
        "Top": 455.843189012635,
        "Width": 314.0,
        "Height": 118.0,
        "FontSize": 14.0,
        "InitialTop": 485.843189012635,
        "InitialHeight": 140.0,
        "TextblockHeight": 20.0,
        "Background": "#FFFFB8D8"
      },
      {
        "Id": "430f244406fa4f7491870dc475b285cd",
        "Title": "",
        "Nodes": [
          "0f63fe328b2b45e5b87228021a4c1d19"
        ],
        "Left": -726.617738329961,
        "Top": -338.136827115803,
        "Width": 319.0,
        "Height": 794.0,
        "FontSize": 14.0,
        "InitialTop": -308.136827115803,
        "InitialHeight": 140.0,
        "TextblockHeight": 20.0,
        "Background": "#FFFFFFFF"
      },
      {
        "Id": "6414ec40434c453b87e563c48cadd3b5",
        "Title": "",
        "Nodes": [
          "412180e5873b4911b3649ba569471030"
        ],
        "Left": -723.647625072381,
        "Top": 575.760978430805,
        "Width": 314.0,
        "Height": 118.0,
        "FontSize": 14.0,
        "InitialTop": 605.760978430805,
        "InitialHeight": 140.0,
        "TextblockHeight": 20.0,
        "Background": "#FFE8F7AD"
      },
      {
        "Id": "36f0f9e884334da693688b864555e850",
        "Title": "",
        "Nodes": [
          "114d2c9273614c7bab9b303a11481e13"
        ],
        "Left": -723.664377796111,
        "Top": 695.879935346825,
        "Width": 314.0,
        "Height": 118.0,
        "FontSize": 14.0,
        "InitialTop": 725.879935346825,
        "InitialHeight": 140.0,
        "TextblockHeight": 20.0,
        "Background": "#FFB9F9E1"
      },
      {
        "Id": "76750d3fdde343028f864572e5e6ae3c",
        "Title": "",
        "Nodes": [
          "dabcf105bf574ce5b4df21ae3ac11689",
          "249ed3a666654d2c8435eed8846219bc",
          "ca7e1e220e5c48ff8db0b5d6ad9ec6ff",
          "e4d82db8cbe346b09b7f8ffb9fb4ac99",
          "3d63227a4d404e02bf4451bbcb36225b",
          "f21643cabd56404e8eca51382e65e59d",
          "5c08a41eedd94c22a69070a1f6e146be",
          "791eb725a7574893af01cd71177e3ae8",
          "06e4b8f747444772b2c776db062bfc87",
          "0b53799905434c758023bbe5db973282",
          "a67c89e6f94a431d8160e772f055305e",
          "efed549b38544ab4a6ae4d2bf2fb0944",
          "b403fd451f234e02adb6f3b8e9d473f5",
          "a2c9f89d0fc142fb864f3d5b236e0a4a",
          "4a74bfaec02248639d90337df74b7d6c",
          "dc89ebcd28af4d758edaa183610da3f3",
          "e55145f0de17417e9d018f610ddf3e39"
        ],
        "Left": -2215.9066805017524,
        "Top": -2061.5269883903238,
        "Width": 2221.0,
        "Height": 1584.0000000000002,
        "FontSize": 14.0,
        "InitialTop": -2031.5269883903236,
        "InitialHeight": 1468.62963130779,
        "TextblockHeight": 20.0,
        "Background": "#FFFFB8D8"
      },
      {
        "Id": "29ce8958226f4df0b2b8305426aa1a6f",
        "Title": "project line from surface to intersect with plane at origin to determine if surface is horizontal or not",
        "Nodes": [],
        "Left": 1879.6079872331484,
        "Top": -215.65138078358814,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "3c4b019652b248b2a653627f792823f5",
        "Title": "Attractor Point",
        "Nodes": [],
        "Left": 1264.6079872331484,
        "Top": 168.92195254974524,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "0f63fe328b2b45e5b87228021a4c1d19",
        "Title": "DYNAMO VERSION\r\n________________________________________________________\r\n2.6.1\r\n\r\n\r\nPACKAGE(S) / VERSION\r\n________________________________________________________\r\nAmpersand / 2019.12.31\r\n\r\n\r\nASSOCIATED FILE(S)      \r\n________________________________________________________\r\n3-point Adaptive Family\r\n\r\n\r\nAUTHOR(S) / DATE\r\n________________________________________________________\r\nPete Heibel / March 2021\r\n\r\n\r\nDESCRIPTION   \r\n________________________________________________________\r\nArray a specified 3-point adaptive family across the selected surface.\r\n\r\nAdjust the 'U Grid' and 'V Grid' sliders to adjust the number of rows and columns.\r\n\r\nAdjust the 'Minimum Offset' and 'Maximum Offset' parameters to determine the random offset range.\r\n\r\nToggle 'Attractor?' and use the 'Attractor' slider to manipulate where the panels begin to offset.\r\n\r\nToggle 'Swap Diagonal Direction?' and/or 'Alternate Diagonals by Row?' to adjust the triangular array.\r\n\r\n\r\nIN PROGRESS\r\n________________________________________________________\r\nWorks with most selected surfaces (vertical or horizontal). Attractor point may not function intuitively depending on the angle of the surface.\r\n\r\n3-point adaptive family contains a Panel_Mark text instance parameter. This script can be continued to determine how to automatically populate that parameter based on a panel's location. This information can be used for scheduling/installation purposes. The same concept can be used for the panel's material instance parameter as well.",
        "Nodes": [],
        "Left": -716.617738329961,
        "Top": -308.136827115803,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "0290c578e3fa44e0a22436cc134482eb",
        "Title": "INPUT\r\n_______________________________________________________\r\n\r\nRED = input data from Revit or associated file(s)",
        "Nodes": [],
        "Left": -713.783238936321,
        "Top": 485.843189012635,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "412180e5873b4911b3649ba569471030",
        "Title": "PROCESS\r\n_______________________________________________________\r\n\r\nYELLOW = processing portion of the algorithm",
        "Nodes": [],
        "Left": -713.647625072381,
        "Top": 605.760978430805,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "114d2c9273614c7bab9b303a11481e13",
        "Title": "OUTPUT\r\n_______________________________________________________\r\n\r\nGREEN = output data to Revit or associated file(s)",
        "Nodes": [],
        "Left": -713.664377796111,
        "Top": 725.879935346825,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      }
    ],
    "X": 283.252488585528,
    "Y": 488.6841977330219,
    "Zoom": 0.22000252939225487
  }
}